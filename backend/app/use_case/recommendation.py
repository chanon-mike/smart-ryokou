import logging
from typing import List

import json5
from openai import AsyncOpenAI
from openai.resources.chat.completions import ChatCompletion, ChatCompletionMessageParam
from openai.types.chat.completion_create_params import Function

from app.core.config import settings
from app.schema.recommendation import (
    PromptRecommendationQuery,
    PromptRecommendationResponse,
    StructuredRecommendationQuery,
    StructuredRecommendationResponse,
)

logger = logging.getLogger(__name__)


class RecommendationUseCase:
    def __init__(self):
        openai_api_key = settings.OPENAI_API_KEY
        base_url = "https://api.openai.iniad.org/api/v1"

        self.client = AsyncOpenAI(
            api_key=openai_api_key,
            base_url=base_url,
        )

    def _extract_json(self, response: str):
        """Extract json from openai response."""
        # Sometimes json generated by openai have trailing comma -> invalid to parse to JSON -> need to use json5 which has more relaxed syntax than json
        # Ref: https://stackoverflow.com/questions/23705304/can-json-loads-ignore-trailing-commas
        try:
            return json5.loads(response)
        except Exception as e:
            logger.error(f"Error decoding JSON: {e}")
            raise ValueError("Invalid JSON format") from e

    async def chat_completion_request(
        self,
        model: str = "gpt-3.5-turbo-1106",
        messages: List[ChatCompletionMessageParam] = None,
        functions: List[Function] = None,
        temperature: float = 0,
    ) -> ChatCompletion:
        """Send request to OpenAI chat completion API."""
        try:
            response = await self.client.chat.completions.create(
                model=model,
                messages=messages,
                functions=functions,
                temperature=temperature,
            )
            return response
        except Exception as e:
            logger.error(f"ChatCompletion Error: {e}")
            raise Exception(f"ChatCompletion Error: {e}")

    def parse_response(self, response: ChatCompletion):
        """Parse response from OpenAI chat completion API."""
        function_call = response.choices[0].message.function_call

        if function_call:
            response_json = self._extract_json(function_call.arguments)
            logger.info(f"Response: {response_json}")
            return response_json
        else:
            logger.error(f"Error: {response}")
            raise ValueError("Invalid response from OpenAI")


class StructuredRecommendationUseCase(RecommendationUseCase):
    def __init__(self):
        super().__init__()
        self.functions: List[Function] = [
            {
                "name": "send_itinerary",
                "description": "Create itinerary plan based on user input.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "recommendation": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "date": {
                                        "type": "string",
                                        "pattern": "^[0-9]{4}/(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])$",
                                        "description": "Date in recommended itinerary in format YYYY/MM/DD",
                                    },
                                    "activities": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "place": {
                                                    "type": "string",
                                                    "description": "Recommended place in Japanese.",
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "description": "Description of a recommended place in Japanese.",
                                                },
                                            },
                                            "required": ["place", "description"],
                                        },
                                    },
                                },
                                "required": ["date", "activities"],
                            },
                        },
                    },
                    "required": ["recommendation"],
                },
            }
        ]

    def _build_prompt(self, query: StructuredRecommendationQuery) -> str:
        prompt = (
            "良く知られている場所と隠れた名所を組み合わせた旅行プランを作成してください。"
            "移動時間を考慮した実現可能な旅程であること。以下の情報に基づいてください：\n"
            f"場所: {query.place}\n"
            f"日付: {query.date_from} から {query.date_to} まで\n"
            # f"人数: {query.people_num}人\n"
        )

        # if query.budget:
        #     prompt += f"予算: {query.budget.to_japanese()}\n"
        if query.trip_pace:
            prompt += f"旅行のペース: {query.trip_pace.to_japanese()}\n"
        if query.interests:
            prompt += f"興味: {', '.join([interest.to_japanese() for interest in query.interests])}\n"
        if query.trip_type:
            prompt += f"旅行の種類: {query.trip_type.to_japanese()}\n"

        return prompt

    async def get_recommendations(
        self, query: StructuredRecommendationQuery
    ) -> StructuredRecommendationResponse:
        logger.info(f"Query: {query}")
        prompt = self._build_prompt(query)
        response = await self.chat_completion_request(
            messages=[
                {
                    "role": "system",
                    "content": "You are a travel planner. You suggest plan in Japanese.",
                },
                {
                    "role": "system",
                    "content": f"Ask for clarification if there is no existing location named '{query.place}'.",
                },
                {"role": "user", "content": prompt},
                {"role": "user", "content": "Send generated trip to user"},
            ],
            functions=self.functions,
        )
        response_json: StructuredRecommendationResponse = self.parse_response(response)
        response_json["title"] = f"{query.place}の旅行プラン"
        logger.info(f"response {response_json}")
        return response_json


class PromptRecommendationUseCase(RecommendationUseCase):
    def __init__(self):
        super().__init__()
        self.functions: List[Function] = [
            {
                "name": "send_recommendations",
                "description": "Send additional recommendations to user in Japanese.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "recommendations": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "place": {
                                        "type": "string",
                                        "description": "Recommended place in Japanese.",
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Description of a recommended place in Japanese.",
                                    },
                                },
                                "required": ["place", "description"],
                            },
                        }
                    },
                    "required": ["recommendations"],
                },
            }
        ]

    def _build_prompt(self, query: PromptRecommendationQuery) -> str:
        prompt = (
            f"Suggest places in above area which match the following requirement: '{query.user_prompt}'."
            f"Suggested places must not include {', '.join(query.suggested_places)}."
        )
        return prompt

    async def get_recommendations(
        self, query: PromptRecommendationQuery
    ) -> PromptRecommendationResponse:
        logger.info(f"Query: {query}")
        prompt = self._build_prompt(query)
        response = await self.chat_completion_request(
            messages=[
                {
                    "role": "system",
                    "content": "You are a travel planner. You suggest plan in Japanese.",
                },
                {
                    "role": "user",
                    "content": f"Return the name of place in this trip title: {query.trip_title}",
                },
                {"role": "user", "content": prompt},
                {"role": "user", "content": "Send recommended places to user"},
            ],
            functions=self.functions,
        )
        response_json: PromptRecommendationResponse = self.parse_response(response)

        return response_json
